"""
This type stub file was generated by pyright.
"""

__all__ = ['with_special_errors', 'assert_func_equal', 'FuncData']
class MissingModule:
    def __init__(self, name) -> None:
        ...
    


def check_version(module, min_ver):
    ...

def with_special_errors(func): # -> _Wrapped[..., Unknown, (*a: Unknown, **kw: Unknown), Unknown]:
    """
    Enable special function errors (such as underflow, overflow,
    loss of precision, etc.)
    """
    ...

def assert_func_equal(func, results, points, rtol=..., atol=..., param_filter=..., knownfailure=..., vectorized=..., dtype=..., nan_ok=..., ignore_inf_sign=..., distinguish_nan_and_inf=...): # -> None:
    ...

class FuncData:
    """
    Data set for checking a special function.

    Parameters
    ----------
    func : function
        Function to test
    data : numpy array
        columnar data to use for testing
    param_columns : int or tuple of ints
        Columns indices in which the parameters to `func` lie.
        Can be imaginary integers to indicate that the parameter
        should be cast to complex.
    result_columns : int or tuple of ints, optional
        Column indices for expected results from `func`.
    result_func : callable, optional
        Function to call to obtain results.
    rtol : float, optional
        Required relative tolerance. Default is 5*eps.
    atol : float, optional
        Required absolute tolerance. Default is 5*tiny.
    param_filter : function, or tuple of functions/Nones, optional
        Filter functions to exclude some parameter ranges.
        If omitted, no filtering is done.
    knownfailure : str, optional
        Known failure error message to raise when the test is run.
        If omitted, no exception is raised.
    nan_ok : bool, optional
        If nan is always an accepted result.
    vectorized : bool, optional
        Whether all functions passed in are vectorized.
    ignore_inf_sign : bool, optional
        Whether to ignore signs of infinities.
        (Doesn't matter for complex-valued functions.)
    distinguish_nan_and_inf : bool, optional
        If True, treat numbers which contain nans or infs as
        equal. Sets ignore_inf_sign to be True.

    """
    def __init__(self, func, data, param_columns, result_columns=..., result_func=..., rtol=..., atol=..., param_filter=..., knownfailure=..., dataname=..., nan_ok=..., vectorized=..., ignore_inf_sign=..., distinguish_nan_and_inf=...) -> None:
        ...
    
    def get_tolerances(self, dtype): # -> tuple[floating[_NBitDouble] | Unknown, floating[_NBitDouble] | Unknown]:
        ...
    
    def check(self, data=..., dtype=..., dtypes=...): # -> None:
        """Check the special function against the data."""
        ...
    
    def __repr__(self): # -> str:
        """Pretty-printing, esp. for Nose output"""
        ...
    


