"""
This type stub file was generated by pyright.
"""

r"""
Parameters used in test and benchmark methods.

Collections of test cases suitable for testing 1-D root-finders
  'original': The original benchmarking functions.
     Real-valued functions of real-valued inputs on an interval
     with a zero.
     f1, .., f3 are continuous and infinitely differentiable
     f4 has a left- and right- discontinuity at the root
     f5 has a root at 1 replacing a 1st order pole
     f6 is randomly positive on one side of the root,
     randomly negative on the other.
     f4 - f6 are not continuous at the root.

  'aps': The test problems in the 1995 paper
     TOMS "Algorithm 748: Enclosing Zeros of Continuous Functions"
     by Alefeld, Potra and Shi. Real-valued functions of
     real-valued inputs on an interval with a zero.
     Suitable for methods which start with an enclosing interval, and
     derivatives up to 2nd order.

  'complex': Some complex-valued functions of complex-valued inputs.
     No enclosing bracket is provided.
     Suitable for methods which use one or more starting values, and
     derivatives up to 2nd order.

  The test cases are provided as a list of dictionaries. The dictionary
  keys will be a subset of:
  ["f", "fprime", "fprime2", "args", "bracket", "smoothness",
  "a", "b", "x0", "x1", "root", "ID"]
"""
description = ...
def f1(x):
    r"""f1 is a quadratic with roots at 0 and 1"""
    ...

def f1_fp(x):
    ...

def f1_fpp(x): # -> Literal[2]:
    ...

def f2(x):
    r"""f2 is a symmetric parabola, x**2 - 1"""
    ...

def f2_fp(x):
    ...

def f2_fpp(x): # -> Literal[2]:
    ...

def f3(x):
    r"""A quartic with roots at 0, 1, 2 and 3"""
    ...

def f3_fp(x):
    ...

def f3_fpp(x):
    ...

def f4(x): # -> Literal[0]:
    r"""Piecewise linear, left- and right- discontinuous at x=1, the root."""
    ...

def f5(x): # -> Literal[0]:
    r"""Hyperbola with a pole at x=1, but pole replaced with 0. Not continuous at root."""
    ...

_f6_cache = ...
def f6(x): # -> float | Literal[0]:
    ...

_ORIGINAL_TESTS_KEYS = ...
_ORIGINAL_TESTS = ...
_ORIGINAL_TESTS_DICTS = ...
def aps01_f(x):
    r"""Straightforward sum of trigonometric function and polynomial"""
    ...

def aps01_fp(x): # -> Any:
    ...

def aps01_fpp(x): # -> Any:
    ...

def aps02_f(x):
    r"""poles at x=n**2, 1st and 2nd derivatives at root are also close to 0"""
    ...

def aps02_fp(x):
    ...

def aps02_fpp(x):
    ...

def aps03_f(x, a, b):
    r"""Rapidly changing at the root"""
    ...

def aps03_fp(x, a, b):
    ...

def aps03_fpp(x, a, b):
    ...

def aps04_f(x, n, a):
    r"""Medium-degree polynomial"""
    ...

def aps04_fp(x, n, a):
    ...

def aps04_fpp(x, n, a):
    ...

def aps05_f(x): # -> Any:
    r"""Simple Trigonometric function"""
    ...

def aps05_fp(x): # -> Any:
    ...

def aps05_fpp(x): # -> Any:
    ...

def aps06_f(x, n):
    r"""Exponential rapidly changing from -1 to 1 at x=0"""
    ...

def aps06_fp(x, n):
    ...

def aps06_fpp(x, n):
    ...

def aps07_f(x, n):
    r"""Upside down parabola with parametrizable height"""
    ...

def aps07_fp(x, n):
    ...

def aps07_fpp(x, n):
    ...

def aps08_f(x, n):
    r"""Degree n polynomial"""
    ...

def aps08_fp(x, n):
    ...

def aps08_fpp(x, n):
    ...

def aps09_f(x, n):
    r"""Upside down quartic with parametrizable height"""
    ...

def aps09_fp(x, n):
    ...

def aps09_fpp(x, n):
    ...

def aps10_f(x, n):
    r"""Exponential plus a polynomial"""
    ...

def aps10_fp(x, n):
    ...

def aps10_fpp(x, n):
    ...

def aps11_f(x, n):
    r"""Rational function with a zero at x=1/n and a pole at x=0"""
    ...

def aps11_fp(x, n):
    ...

def aps11_fpp(x, n):
    ...

def aps12_f(x, n): # -> Any:
    r"""nth root of x, with a zero at x=n"""
    ...

def aps12_fp(x, n):
    ...

def aps12_fpp(x, n):
    ...

_MAX_EXPABLE = ...
def aps13_f(x): # -> Literal[0]:
    r"""Function with *all* derivatives 0 at the root"""
    ...

def aps13_fp(x): # -> Literal[0]:
    ...

def aps13_fpp(x): # -> Literal[0]:
    ...

def aps14_f(x, n):
    r"""0 for negative x-values, trigonometric+linear for x positive"""
    ...

def aps14_fp(x, n): # -> Literal[0]:
    ...

def aps14_fpp(x, n): # -> Literal[0]:
    ...

def aps15_f(x, n): # -> float | Any:
    r"""piecewise linear, constant outside of [0, 0.002/(1+n)]"""
    ...

def aps15_fp(x, n): # -> float:
    ...

def aps15_fpp(x, n): # -> float:
    ...

_APS_TESTS_KEYS = ...
_APS_TESTS = ...
_APS_TESTS_DICTS = ...
def cplx01_f(z, n, a):
    r"""z**n-a:  Use to find the nth root of a"""
    ...

def cplx01_fp(z, n, a):
    ...

def cplx01_fpp(z, n, a):
    ...

def cplx02_f(z, a):
    r"""e**z - a: Use to find the log of a"""
    ...

def cplx02_fp(z, a): # -> Any:
    ...

def cplx02_fpp(z, a): # -> Any:
    ...

_COMPLEX_TESTS_KEYS = ...
_COMPLEX_TESTS = ...
_COMPLEX_TESTS_DICTS = ...
def get_tests(collection=..., smoothness=...): # -> list[dict[str, Unknown]]:
    r"""Return the requested collection of test cases, as an array of dicts with subset-specific keys

    Allowed values of collection:
    'original': The original benchmarking functions.
         Real-valued functions of real-valued inputs on an interval with a zero.
         f1, .., f3 are continuous and infinitely differentiable
         f4 has a single discontinuity at the root
         f5 has a root at 1 replacing a 1st order pole
         f6 is randomly positive on one side of the root, randomly negative on the other
    'aps': The test problems in the TOMS "Algorithm 748: Enclosing Zeros of Continuous Functions"
         paper by Alefeld, Potra and Shi. Real-valued functions of
         real-valued inputs on an interval with a zero.
         Suitable for methods which start with an enclosing interval, and
         derivatives up to 2nd order.
    'complex': Some complex-valued functions of complex-valued inputs.
         No enclosing bracket is provided.
         Suitable for methods which use one or more starting values, and
         derivatives up to 2nd order.

    The dictionary keys will be a subset of
    ["f", "fprime", "fprime2", "args", "bracket", "a", b", "smoothness", "x0", "x1", "root", "ID"]
     """
    ...

methods = ...
mstrings = ...
functions = ...
fstrings = ...
def fun1(x):
    ...

def fun2(x):
    ...

def fun3(x):
    ...

def fun4(x):
    ...

def fun5(x):
    ...

def fun6(x):
    ...

def fun7(x): # -> Literal[0]:
    ...

def fun8(x):
    ...

def fun9(x):
    ...

_CHANDRUPATLA_TESTS_KEYS = ...
_CHANDRUPATLA_TESTS = ...
_CHANDRUPATLA_TESTS = ...
_CHANDRUPATLA_TESTS_DICTS = ...
